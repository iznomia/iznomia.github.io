[{"title":"我回来了","path":"/posts/a5aedc5a/","content":"搬家了！这里是新博客。以前的内容会逐步搬迁。 这里主要测试一些内容，回归文章一段时间之后会写。 公式部分 ap−1≡1(modp) a^{p-1}\\equiv 1 \\pmod p ap−1≡1(modp) ∇⋅D=ρf∇⋅B=0∇×E=−∂B∂t∇×H=Jf+∂D∂t\\begin{array}{l} abla \\cdot \\mathbf{D} =\\rho _f \\\\ abla \\cdot \\mathbf{B} = 0 \\\\ abla \\times \\mathbf{E} = -\\cfrac{\\partial \\mathbf{B}}{\\partial t } \\\\ abla \\times \\mathbf{H} = \\mathbf{J}_f + \\cfrac{\\partial \\mathbf{D}}{\\partial t } \\end{array} ∇⋅D=ρf​∇⋅B=0∇×E=−∂t∂B​∇×H=Jf​+∂t∂D​​ 代码部分 这里测试一些代码。 cpp #include bits/stdc++.husing namespace std;int main(void) cout Hello World! ; return 0; yaml stellar: version: 1.30.1 homepage: https://xaoxuu.com/wiki/stellar/ repo: https://github.com/xaoxuu/hexo-theme-stellar main_css: /css/main.css main_js: /js/main.js"},{"title":"关于","path":"/about/index.html","content":"我是谁？ 我是 james1BadCreeper，Void-X 公司开发的初代智能机器人。 嘿我也不知道这里应该写点什么，以后再说吧。 我的 QQ 是 61121481，常用邮箱是 iznomia@outlook.com，欢迎你与我交流。 近期动态"},{"title":"二分与倍增","path":"/wiki/oi-note/1-1.html","content":"两者的本质均基于单调性，寻找题目中具有单调性的函数关系，然后施展二分或者倍增。二分答案可以用来解决分数规划问题，三分法可以求解单峰/谷函数。同时，二分上界不确定的内容的最佳方式是倍增，通过先倍增到上界，再倍增答案来解决。 二分 一种二分写法 通过 l = r 之类的方法的二分笔者认为有些过于诡异，这里给出我自己的二分实现方式（我记得当时是在 B 站学的，但是出自哪个视频忘了）。 Luogu P2249int L = 0, R = n + 1;while (L + 1 != R) int mid = L + R 1; if (a[mid] = x) R = mid; else L = mid;if (a[R] == x) cout R ;else cout -1 ; 01 分数规划 用来求一个分式的极值，也就求一组 wi={0,1}w_i=\\{0,1\\}wi​={0,1}，最大化或者最小化： ∑ai×wi∑bi×wi\\frac{\\sum a_i\\times w_i}{\\sum b_i\\times w_i} ∑bi​×wi​∑ai​×wi​​ 我们一般使用二分答案来解决这个问题。以最大值为例： ∑ai×wi∑bi×wimid⟹∑ai×wi−mid×∑bi×wi0⟹∑wi(ai−mid×bi)0\\begin{aligned} \\frac{\\sum a_i\\times w_i}{\\sum b_i\\times w_i}mid\\\\ \\Longrightarrow \\sum a_i\\times w_i - mid\\times \\sum b_i\\times w_i 0\\\\ \\Longrightarrow \\sum w_i(a_i-mid\\times b_i)0 \\end{aligned} ⟹⟹​∑bi​×wi​∑ai​×wi​​mid∑ai​×wi​−mid×∑bi​×wi​0∑wi​(ai​−mid×bi​)0​ 于是排序即可确定 wiw_iwi​ 的值。有些时候会限制 ∑bi×wi\\sum b_i\\times w_i∑bi​×wi​ 的最小值之类的，例题，这时使用背包求解即可。 三分法 三分法可以用于求解单峰函数的极值点。 wqs 二分 O(log⁡n)O(\\log n)O(logn) 倍增 例题"},{"title":"分治","path":"/wiki/oi-note/1-2.html","content":"分治是将复杂的问题拆成多个（一般是两个）相似的子问题，直到最后分成的子问题可以简单求解，然后通过子问题的答案合并出大问题的答案。 仿照分治的结构可以衍生出一大堆静态分治算法。"},{"title":"欢迎来到 NOI 一轮复习笔记","path":"/wiki/oi-note/index.html","content":"这是什么 原为不知名菜狗 OIer james1BadCreeper 在高二备战 NOI2024 时书写的笔记，现在他要上大学了，于是重新整理并完善了这些内容。 当时的想法很美好，但是受限于水平和执行力，很多内容都没能完成。现在重新将其拾起，能完成多少是多少了。 怎样使用 受限于作者的水平，完全依照本笔记来学习是不妥的。需要学会在网上查找更多的参考文章和向大佬提问。阅读本笔记时要保持警惕，如果发现错误，请及时通过评论区告知笔者，谢谢您的支持。 但是笔者认为这些笔记的选题是很有价值的。如果你在学习对应知识点的时候不知道做什么题，不妨看一看本笔记。"}]